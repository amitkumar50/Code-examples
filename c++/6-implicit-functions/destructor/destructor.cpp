/*	destructor.cpp
WHAT?
  - special member function that is called when lifetime of an object ends.
  - dtr frees resources that object may have acquired during its lifetime.

WHEN DTR IS CALLED?  whenever an object's lifetime ends, which includes
  a. program termination with exit()
  b. thread exit.
  c. end of scope
  d. delete called for objects with dynamic storage duration
  e. stack unwinding, for objects with automatic storage duration 

PARAMETERS? None
 
RETURN TYPE? None

SYNTAX?
 1. ~ class_name ();    - Normal declaration of dtr
 2. virtual ~ class_name ();    - Virtual destructor is required in a base class
 3. decl-specifier-seq(optional) ~ class_name () = default;     (since C++11)
 4. decl-specifier-seq(optional) ~ class_name () = delete;      (since C++11)
 5. attr(optional) decl-specifier-seq(optional) id-expression ( void(optional) ) except(optional) attr(optional) ;

decl-specifier-seq - friend, inline, virtual, constexpr, consteval (since C++20) or nothing (no return type)

FORCING DTR TO BE GENERATED BY COMPILER
        decl-specifier-seq(optional) ~ class_name () = default;
*/

/**********USER DEFINED DTR***************/
struct A{
        int *p;
        A():p(new int){*p=2; cout<<"ctr\n";}
//      ~A(){cout<<"dtr\n";}    
        void disp(){
                cout<<*(this->p)<<endl;
        }
};
int main(){
        {
                {
                A obj;
                }
                cout<<"Out of scope\n";
        }
}
/*O/P:
ctr
dtr
Out of scope
*/

